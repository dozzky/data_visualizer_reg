import streamlit as st
import pandas as pd
import json
from datetime import datetime
import plotly.express as px

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", layout="wide")

st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª", type="json")

if uploaded_file:
    data = json.load(uploaded_file)
    
    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    if isinstance(data, dict):
        df = pd.json_normalize(data)
    elif isinstance(data, list):
        df = pd.json_normalize(data)
    else:
        st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
        st.stop()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

    min_date = df["–î–∞—Ç–∞"].min().date()
    max_date = df["–î–∞—Ç–∞"].max().date()
    period = st.sidebar.date_input("–ü–µ—Ä–∏–æ–¥", [min_date, max_date])

    —Å–º–µ–Ω–∞ = st.sidebar.multiselect("–°–º–µ–Ω–∞", df["–°–º–µ–Ω–∞"].unique())
    –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ = st.sidebar.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].unique())
    —Ç–æ–ø–ª–∏–≤–æ = st.sidebar.multiselect("–¢–æ–ø–ª–∏–≤–æ", df["–¢–æ–ø–ª–∏–≤–æ"].unique())

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df.copy()

    if len(period) == 2:
        start, end = period
        filtered_df = filtered_df[(filtered_df["–î–∞—Ç–∞"].dt.date >= start) & (filtered_df["–î–∞—Ç–∞"].dt.date <= end)]

    if —Å–º–µ–Ω–∞:
        filtered_df = filtered_df[filtered_df["–°–º–µ–Ω–∞"].isin(—Å–º–µ–Ω–∞)]
    if –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
        filtered_df = filtered_df[filtered_df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].isin(–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)]
    if —Ç–æ–ø–ª–∏–≤–æ:
        filtered_df = filtered_df[filtered_df["–¢–æ–ø–ª–∏–≤–æ"].isin(—Ç–æ–ø–ª–∏–≤–æ)]

    st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(filtered_df)

    # -------------------
    # –†–∞—Å—á–µ—Ç—ã –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
    # -------------------
    if not filtered_df.empty:
        kkf_results = []   # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ö–∫—Ñ
        kisvr_results = [] # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ö–∏—Å–≤—Ä

        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ (–æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö)
        days_count = filtered_df["–î–∞—Ç–∞"].dt.date.nunique()
        T_k = days_count * 24

        # --- –ö–∫—Ñ: —Å—á–∏—Ç–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ ---
        for (equip, date), group in filtered_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", filtered_df["–î–∞—Ç–∞"].dt.date]):
            T_f = 0

            for _, row in group.iterrows():
                durations = [datetime.fromisoformat(x) for x in row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]]
                durations_hours = [(d.hour + d.minute/60) for d in durations]
                includes = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å"]

                # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (–¥–≤–∏–≥–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω)
                T_f += sum([dur for dur, inc in zip(durations_hours, includes) if inc])

            K_kf = T_f / 24 if 24 > 0 else 0  # –ø–æ —Å—É—Ç–∫–∞–º

            kkf_results.append({
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
                "–î–∞—Ç–∞": date,
                "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ (–¢–∫), —á": 24,
                "–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–¢—Ñ), —á": round(T_f, 2),
                "–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)": round(K_kf, 3),
            })

        # --- –ö–∏—Å–≤—Ä: —Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞–∂–¥–æ–π —Å–º–µ–Ω–µ –∏ –¥–∞—Ç–µ ---
        for (equip, shift, date), group in filtered_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞", filtered_df["–î–∞—Ç–∞"].dt.date]):
            T_sm = 0
            T_sm_f = 0

            for _, row in group.iterrows():
                durations = [datetime.fromisoformat(x) for x in row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]]
                durations_hours = [(d.hour + d.minute/60) for d in durations]
                includes = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å"]

                T_sm += sum(durations_hours)
                T_sm_f += sum([dur for dur, inc in zip(durations_hours, includes) if inc])

            K_is_vr = T_sm_f / T_sm if T_sm > 0 else 0

            kisvr_results.append({
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
                "–°–º–µ–Ω–∞": shift,
                "–î–∞—Ç–∞": date,
                "–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è (–¢—Å–º), —á": round(T_sm, 2),
                "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ —Å–º–µ–Ω–µ (–¢—Å–º—Ñ), —á": round(T_sm_f, 2),
                "–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)": round(K_is_vr, 3),
            })

        kkf_df = pd.DataFrame(kkf_results)
        kisvr_df = pd.DataFrame(kisvr_results)

        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã
        st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞: –ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)")
        st.dataframe(kkf_df)

        st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞: –ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)")
        st.dataframe(kisvr_df)

        # -------------------
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        # -------------------
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏"):
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∫—Ñ –ø–æ –¥–Ω—è–º")
            fig_kkf = px.line(
                kkf_df,
                x="–î–∞—Ç–∞",
                y="–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                markers=True,
                title="–î–∏–Ω–∞–º–∏–∫–∞ –ö–∫—Ñ –ø–æ –¥–Ω—è–º"
            )
            st.plotly_chart(fig_kkf, use_container_width=True)

            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º")
            fig_kisvr = px.line(
                kisvr_df,
                x="–î–∞—Ç–∞",
                y="–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                line_dash="–°–º–µ–Ω–∞",
                markers=True,
                title="–î–∏–Ω–∞–º–∏–∫–∞ –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º"
            )
            st.plotly_chart(fig_kisvr, use_container_width=True)

    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
