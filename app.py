import streamlit as st
import pandas as pd
import json
from datetime import datetime
import plotly.express as px

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", layout="wide")

st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª", type="json")

if uploaded_file:
    data = json.load(uploaded_file)
    
    if isinstance(data, dict):
        df = pd.json_normalize(data)
    elif isinstance(data, list):
        df = pd.json_normalize(data)
    else:
        st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
        st.stop()
    
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

    min_date = df["–î–∞—Ç–∞"].min().date()
    max_date = df["–î–∞—Ç–∞"].max().date()
    period = st.sidebar.date_input("–ü–µ—Ä–∏–æ–¥", [min_date, max_date])

    —Å–º–µ–Ω–∞ = st.sidebar.multiselect("–°–º–µ–Ω–∞", df["–°–º–µ–Ω–∞"].unique())
    –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ = st.sidebar.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].unique())
    —Ç–æ–ø–ª–∏–≤–æ = st.sidebar.multiselect("–¢–æ–ø–ª–∏–≤–æ", df["–¢–æ–ø–ª–∏–≤–æ"].unique())

    smoothing_window = st.sidebar.slider("–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–∫–æ–ª-–≤–æ –¥–Ω–µ–π)", 1, 10, 1)

    filtered_df = df.copy()
    if len(period) == 2:
        start, end = period
        filtered_df = filtered_df[(filtered_df["–î–∞—Ç–∞"].dt.date >= start) & (filtered_df["–î–∞—Ç–∞"].dt.date <= end)]
    if —Å–º–µ–Ω–∞:
        filtered_df = filtered_df[filtered_df["–°–º–µ–Ω–∞"].isin(—Å–º–µ–Ω–∞)]
    if –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
        filtered_df = filtered_df[filtered_df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].isin(–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)]
    if —Ç–æ–ø–ª–∏–≤–æ:
        filtered_df = filtered_df[filtered_df["–¢–æ–ø–ª–∏–≤–æ"].isin(—Ç–æ–ø–ª–∏–≤–æ)]

    st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    with st.expander("üìä –¢–∞–±–ª–∏—Ü–∞: –í—Å–µ –¥–∞–Ω–Ω—ã–µ"):
        st.dataframe(filtered_df)
    
    if not filtered_df.empty:
        kkf_results = []
        kisvr_results = []

        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ (–æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö)
        days_count = filtered_df["–î–∞—Ç–∞"].dt.date.nunique()
        T_k = days_count * 24

        # –ö–∫—Ñ + –¢–ø–ª + –ö–∏–æ + –ö—Ç–≥ –ø–æ –¥–∞—Ç–µ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        for (equip, date), group in filtered_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", filtered_df["–î–∞—Ç–∞"].dt.date]):
            T_f = 0   # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            T_ppr = 0 # –≤—Ä–µ–º—è –ü–ü–†
            T_pzo = T_ob = T_ln = T_reg = T_rem = 0

            for _, row in group.iterrows():
                durations = [datetime.fromisoformat(x) for x in row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]]
                durations_hours = [(d.hour + d.minute/60) for d in durations]
                includes = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å"]
                usage_types = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∏–¥–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–†–∞–±–æ—á–µ–≥–æ–í—Ä–µ–º–µ–Ω–∏"]

                # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (–¥–≤–∏–≥–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω)
                T_f += sum([dur for dur, inc in zip(durations_hours, includes) if inc])

                # –ü–ü–†
                T_ppr += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–ü–ü–†"])

                # –î–ª—è –ö–∏–æ
                T_pzo += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–ï–û"])
                T_ob  += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–û–±–µ–¥"])
                T_ln  += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–õ–∏—á–Ω—ã–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏"])
                T_reg += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage in ["–í—ã–¥–∞—á–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞", "–ó–∞–ø—Ä–∞–≤–∫–∞"]])

                # –î–ª—è –ö—Ç–≥ (—Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
                T_rem += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage in [
                    "–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–∑–ª–æ–≤ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤",
                    "–û–±–∫–∞—Ç–∫–∞ –î–í–°",
                    "–¢–û",
                    "–†–µ–º–æ–Ω—Ç",
                    "–ü–ü–†"
                ]])

            T_kl = 24  # –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ –∑–∞ –¥–µ–Ω—å
            T_pl = T_kl - T_ppr  # –ø–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥
            K_kf = T_f / T_kl if T_kl > 0 else 0

            # –ö–∏–æ
            denom_ki = T_kl - T_pzo - T_ob - T_ln - T_reg
            K_io = T_f / denom_ki if denom_ki > 0 else 0

            # –ö—Ç–≥
            denom_ktg = T_kl - T_ob - T_ln
            K_tg = (denom_ktg - T_rem) / denom_ktg if denom_ktg > 0 else 0

            kkf_results.append({
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
                "–î–∞—Ç–∞": date,
                "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ (–¢–∫), —á": T_kl,
                "–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á": round(T_pl, 2),
                "–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–¢—Ñ), —á": round(T_f, 2),
                "–í—Ä–µ–º—è –ü–ü–† (–¢–ø–ø—Ä), —á": round(T_ppr, 2),
                "–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)": round(K_kf, 3),
                "–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)": round(K_io, 3),
                "–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)": round(K_tg, 3),
            })

        # –ö–∏—Å–≤—Ä + –¢—á—Å–º –ø–æ –¥–∞—Ç–µ, —Å–º–µ–Ω–µ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        for (equip, shift, date), group in filtered_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞", filtered_df["–î–∞—Ç–∞"].dt.date]):
            T_sm = 0
            T_sm_f = 0
            T_pzo = T_ob = T_ln = T_reg = 0
            for _, row in group.iterrows():
                durations = [datetime.fromisoformat(x) for x in row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]]
                durations_hours = [(d.hour + d.minute/60) for d in durations]
                includes = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å"]
                usage_types = row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∏–¥–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–†–∞–±–æ—á–µ–≥–æ–í—Ä–µ–º–µ–Ω–∏"]

                # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–º–µ–Ω–µ
                T_sm += sum(durations_hours)

                # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (–¥–≤–∏–≥–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω)
                T_sm_f += sum([dur for dur, inc in zip(durations_hours, includes) if inc])

                # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤–∏–¥–∞–º –≤—Ä–µ–º–µ–Ω–∏
                T_pzo += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–ï–û"])
                T_ob  += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–û–±–µ–¥"])
                T_ln  += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage == "–õ–∏—á–Ω—ã–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏"])
                T_reg += sum([dur for dur, usage in zip(durations_hours, usage_types) if usage in ["–í—ã–¥–∞—á–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞", "–ó–∞–ø—Ä–∞–≤–∫–∞"]])

            # –ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É
            T_chsm = T_sm - T_pzo - T_ob - T_ln - T_reg

            K_is_vr = T_sm_f / T_sm if T_sm > 0 else 0
            kisvr_results.append({
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
                "–°–º–µ–Ω–∞": shift,
                "–î–∞—Ç–∞": date,
                "–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è (–¢—Å–º), —á": round(T_sm, 2),
                "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ —Å–º–µ–Ω–µ (–¢—Å–º—Ñ), —á": round(T_sm_f, 2),
                "–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á": round(T_chsm, 2),
                "–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)": round(K_is_vr, 3),
            })

        kkf_df = pd.DataFrame(kkf_results)
        kisvr_df = pd.DataFrame(kisvr_results)

        with st.expander("üìä –¢–∞–±–ª–∏—Ü–∞: –ö–∫—Ñ –ø–æ –¥–Ω—è–º"):
            st.dataframe(kkf_df)

        with st.expander("üìä –¢–∞–±–ª–∏—Ü–∞: –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º"):
            st.dataframe(kisvr_df)

        st.subheader("üìå –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

        # –°—Ä–µ–¥–Ω–µ–µ –ö–∫—Ñ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        avg_kkf = kkf_df.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"].mean().reset_index()
        avg_kkf.rename(columns={"–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)": "–°—Ä–µ–¥–Ω–µ–µ –ö–∫—Ñ"}, inplace=True)
        with st.expander("–°—Ä–µ–¥–Ω–µ–µ –ö–∫—Ñ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é:"):
            st.dataframe(avg_kkf)

        # –°—Ä–µ–¥–Ω–µ–µ –ö–∏—Å–≤—Ä –ø–æ —Å–º–µ–Ω–∞–º
        avg_kisvr = kisvr_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞"])["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"].mean().reset_index()
        avg_kisvr.rename(columns={"–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)": "–°—Ä–µ–¥–Ω–µ–µ –ö–∏—Å–≤—Ä"}, inplace=True)
        with st.expander("–°—Ä–µ–¥–Ω–µ–µ –ö–∏—Å–≤—Ä –ø–æ —Å–º–µ–Ω–∞–º:"):
            st.dataframe(avg_kisvr)
            
        cols_avg = st.columns(4)
        
        overall_avg_kkf = round(kkf_df["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"].mean(), 3)
        
        days = (period[1] - period[0]).days + 1
        cols_avg[0].metric("–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ –≤—Ä–µ–º–µ–Ω–∏ –¢–∫", days*24)
        cols_avg[1].metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–∫—Ñ", overall_avg_kkf)
        
        shifts = ["1 —Å–º–µ–Ω–∞ (07-19)", "2 —Å–º–µ–Ω–∞ (19-07)"]
        for i, shift in enumerate(shifts):
            avg_shift = kisvr_df[kisvr_df["–°–º–µ–Ω–∞"] == shift]["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"].mean()
            avg_shift = round(avg_shift, 3) if not pd.isna(avg_shift) else 0
            cols_avg[i+2].metric(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–∏—Å–≤—Ä –ø–æ {shift}", avg_shift)

        cols_extra = st.columns(5)
        
        # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ü–ü–† –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        total_ppr = round(kkf_df["–í—Ä–µ–º—è –ü–ü–† (–¢–ø–ø—Ä), —á"].sum(), 2)
        cols_extra[0].metric("–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ü–ü–† (–¢–ø–ø—Ä)", total_ppr)

        # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¢–ø–ª
        avg_tpl = round(kkf_df["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"].mean(), 2)
        cols_extra[1].metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¢–ø–ª", avg_tpl)

        # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¢—á—Å–º
        avg_chsm = round(kisvr_df["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"].mean(), 2)
        cols_extra[2].metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¢—á—Å–º", avg_chsm)

        # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–∏–æ
        avg_kio = round(kkf_df["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"].mean(), 3)
        cols_extra[3].metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–∏–æ", avg_kio)

        # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö—Ç–≥
        avg_ktg = round(kkf_df["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"].mean(), 3)
        cols_extra[4].metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö—Ç–≥", avg_ktg)
        
        st.subheader("üìÖ –í—ã–≤–µ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –¥–Ω—è–º")
        col_graphs = st.columns(2)
        if col_graphs[0].button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)"):
            avg_kkf_per_day = kkf_df.groupby("–î–∞—Ç–∞")["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"].mean().reset_index()
            if smoothing_window > 1:
                avg_kkf_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ"] = avg_kkf_per_day["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"].rolling(smoothing_window, min_periods=1).mean()
            else:
                avg_kkf_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ"] = avg_kkf_per_day["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"]
            
            fig_avg_kkf = px.line(
                avg_kkf_per_day,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –ö–∫—Ñ –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ": "–°—Ä–µ–¥–Ω–µ–µ –ö–∫—Ñ"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∫—Ñ –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_kkf, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –¢–ø–ª –ø–æ –¥–Ω—è–º ---
            avg_tpl_per_day = kkf_df.groupby("–î–∞—Ç–∞")["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"].mean().reset_index()
            if smoothing_window > 1:
                avg_tpl_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª"] = avg_tpl_per_day["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"].rolling(smoothing_window, min_periods=1).mean()
            else:
                avg_tpl_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª"] = avg_tpl_per_day["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"]

            fig_avg_tpl = px.line(
                avg_tpl_per_day,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –¢–ø–ª –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª": "–°—Ä–µ–¥–Ω–µ–µ –¢–ø–ª"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –¢–ø–ª (–ø–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥) –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_tpl, use_container_width=True)

            avg_kisvr_per_day_shift = kisvr_df.groupby(["–î–∞—Ç–∞", "–°–º–µ–Ω–∞"])["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"].mean().reset_index()
            if smoothing_window > 1:
                avg_kisvr_per_day_shift["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä"] = avg_kisvr_per_day_shift.groupby("–°–º–µ–Ω–∞")["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"].transform(lambda x: x.rolling(smoothing_window, min_periods=1).mean())
            else:
                avg_kisvr_per_day_shift["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä"] = avg_kisvr_per_day_shift["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"]
            
            fig_avg_kisvr = px.line(
                avg_kisvr_per_day_shift,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä",
                color="–°–º–µ–Ω–∞",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä": "–°—Ä–µ–¥–Ω–µ–µ –ö–∏—Å–≤—Ä"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_kisvr, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –¢—á—Å–º –ø–æ –¥–Ω—è–º ---
            avg_chsm_per_day = kisvr_df.groupby("–î–∞—Ç–∞")["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"].mean().reset_index()
            if smoothing_window > 1:
                avg_chsm_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º"] = avg_chsm_per_day["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"].rolling(smoothing_window, min_periods=1).mean()
            else:
                avg_chsm_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º"] = avg_chsm_per_day["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"]

            fig_avg_chsm = px.line(
                avg_chsm_per_day,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –¢—á—Å–º –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º": "–°—Ä–µ–¥–Ω–µ–µ –¢—á—Å–º"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –¢—á—Å–º –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_chsm, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –ö–∏–æ –ø–æ –¥–Ω—è–º ---
            avg_kio_per_day = kkf_df.groupby("–î–∞—Ç–∞")["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"].mean().reset_index()
            if smoothing_window > 1:
                avg_kio_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ"] = avg_kio_per_day["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"].rolling(smoothing_window, min_periods=1).mean()
            else:
                avg_kio_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ"] = avg_kio_per_day["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"]

            fig_avg_kio = px.line(
                avg_kio_per_day,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –ö–∏–æ –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ": "–ö–∏–æ"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∏–æ –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_kio, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –ö—Ç–≥ –ø–æ –¥–Ω—è–º ---
            avg_ktg_per_day = kkf_df.groupby("–î–∞—Ç–∞")["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"].mean().reset_index()
            if smoothing_window > 1:
                avg_ktg_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥"] = avg_ktg_per_day["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"].rolling(smoothing_window, min_periods=1).mean()
            else:
                avg_ktg_per_day["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥"] = avg_ktg_per_day["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"]

            fig_avg_ktg = px.line(
                avg_ktg_per_day,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥",
                markers=True,
                title=f"–°—Ä–µ–¥–Ω–µ–µ –ö—Ç–≥ –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥": "–ö—Ç–≥"}
            )
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö—Ç–≥ –ø–æ –¥–Ω—è–º (—Å—Ä–µ–¥–Ω–µ–µ)")
            st.plotly_chart(fig_avg_ktg, use_container_width=True)
            
        
        if col_graphs[1].button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é"):
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∫—Ñ –ø–æ –¥–Ω—è–º")
            kkf_plot_df = kkf_df.copy()
            if smoothing_window > 1:
                kkf_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ"] = kkf_plot_df.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"].transform(lambda x: x.rolling(smoothing_window, min_periods=1).mean())
            else:
                kkf_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ"] = kkf_plot_df["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ)"]

            fig_kkf = px.line(
                kkf_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∫—Ñ",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ö–∫—Ñ –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)"
            )
            st.plotly_chart(fig_kkf, use_container_width=True)

            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –¢–ø–ª (–ø–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥) –ø–æ –¥–Ω—è–º –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
            tpl_plot_df = kkf_df.copy()
            if smoothing_window > 1:
                tpl_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª"] = tpl_plot_df.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"].transform(
                    lambda x: x.rolling(smoothing_window, min_periods=1).mean()
                )
            else:
                tpl_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª"] = tpl_plot_df["–ü–ª–∞–Ω–æ–≤—ã–π —Ñ–æ–Ω–¥ (–¢–ø–ª), —á"]

            fig_tpl = px.line(
                tpl_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –¢–ø–ª –ø–æ –¥–Ω—è–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢–ø–ª": "–¢–ø–ª"}
            )
            st.plotly_chart(fig_tpl, use_container_width=True)

            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º")
            kisvr_plot_df = kisvr_df.copy()
            if smoothing_window > 1:
                kisvr_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä"] = kisvr_plot_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞"])["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"].transform(lambda x: x.rolling(smoothing_window, min_periods=1).mean())
            else:
                kisvr_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä"] = kisvr_plot_df["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä)"]

            fig_kisvr = px.line(
                kisvr_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ö–∏—Å–≤—Ä",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                line_dash="–°–º–µ–Ω–∞",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ö–∏—Å–≤—Ä –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)"
            )
            st.plotly_chart(fig_kisvr, use_container_width=True)

            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –¢—á—Å–º –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º")
            chsm_plot_df = kisvr_df.copy()
            if smoothing_window > 1:
                chsm_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º"] = chsm_plot_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞"])["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"].transform(
                    lambda x: x.rolling(smoothing_window, min_periods=1).mean()
                )
            else:
                chsm_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º"] = chsm_plot_df["–ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–º–µ–Ω—É (–¢—á—Å–º), —á"]

            fig_chsm = px.line(
                chsm_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                line_dash="–°–º–µ–Ω–∞",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –¢—á—Å–º –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –¢—á—Å–º": "–¢—á—Å–º"}
            )
            st.plotly_chart(fig_chsm, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –ö–∏–æ ---
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö–∏–æ –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º")
            kio_plot_df = kkf_df.copy()
            if smoothing_window > 1:
                kio_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ"] = kio_plot_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"])["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"].transform(
                    lambda x: x.rolling(smoothing_window, min_periods=1).mean()
                )
            else:
                kio_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ"] = kio_plot_df["–ö–æ—ç—Ñ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∏–æ)"]

            fig_kio = px.line(
                kio_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ö–∏–æ –ø–æ –¥–Ω—è–º –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö–∏–æ": "–ö–∏–æ"}
            )
            st.plotly_chart(fig_kio, use_container_width=True)

            # --- –ì—Ä–∞—Ñ–∏–∫ –ö—Ç–≥ ---
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫: –ö—Ç–≥ –ø–æ –¥–Ω—è–º –∏ —Å–º–µ–Ω–∞–º")
            ktg_plot_df = kkf_df.copy()
            if smoothing_window > 1:
                ktg_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥"] = ktg_plot_df.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"])["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"].transform(
                    lambda x: x.rolling(smoothing_window, min_periods=1).mean()
                )
            else:
                ktg_plot_df["–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥"] = ktg_plot_df["–ö–æ—ç—Ñ. —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ö—Ç–≥)"]

            fig_ktg = px.line(
                ktg_plot_df,
                x="–î–∞—Ç–∞",
                y="–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥",
                color="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                markers=True,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ö—Ç–≥ –ø–æ –¥–Ω—è–º –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {smoothing_window} –¥–Ω–µ–π)",
                labels={"–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ö—Ç–≥": "–ö—Ç–≥"}
            )
            st.plotly_chart(fig_ktg, use_container_width=True)

    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
