import streamlit as st
import pandas as pd
import json
import altair as alt
import numpy as np
from datetime import datetime, timedelta
from typing import Any

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ —Å–º–µ–Ω–∞–º", layout="wide")

st.title("üìä –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Äî –ö–∫—Ñ –∏ –ö–∏—Å–≤—Ä (–ø–æ —Å–º–µ–Ω–∞–º)")

# ---------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------

def ensure_list(x: Any):
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É: –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞-JSON -> —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ -> [—Å—Ç—Ä–æ–∫–∞], –µ—Å–ª–∏ NaN -> []."""
    if pd.isna(x):
        return []
    if isinstance(x, list):
        return x
    if isinstance(x, (tuple, set)):
        return list(x)
    if isinstance(x, str):
        s = x.strip()
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        if s.startswith("[") and s.endswith("]"):
            try:
                return json.loads(s)
            except Exception:
                pass
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ 'True'/'False' –∏–ª–∏ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        return [x]
    return [x]


def to_bool(x: Any) -> bool:
    if isinstance(x, bool):
        return x
    if isinstance(x, (int, float)):
        return x != 0
    if isinstance(x, str):
        s = x.strip().lower()
        return s in ("true", "1", "yes", "y", "t")
    return False


def duration_hours_from_item(item: Any) -> float:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
    - —á–∏—Å–ª–æ -> —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—ã
    - —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ '0001-01-01T05:00:00' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è (5—á)
    - —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 'HH:MM:SS' -> –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Å—ã
    - —Å—Ç—Ä–æ–∫–∞ —Å –¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º -> float
    –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0
    """
    if item is None:
        return 0.0
    # —á–∏—Å–ª–æ–≤–æ–π
    if isinstance(item, (int, float)):
        try:
            return float(item)
        except Exception:
            return 0.0
    # —Å—Ç—Ä–æ–∫–∞
    if isinstance(item, str):
        s = item.strip()
        if s == "":
            return 0.0
        # iso-like with dateTtime
        try:
            if "T" in s:
                dt = datetime.fromisoformat(s)
                return dt.hour + dt.minute / 60.0 + dt.second / 3600.0 + dt.microsecond / 3_600_000_000.0
            # try HH:MM:SS
            try:
                t = datetime.strptime(s, "%H:%M:%S")
                return t.hour + t.minute / 60.0 + t.second / 3600.0
            except Exception:
                pass
            # try float with comma
            return float(s.replace(",", "."))
        except Exception:
            try:
                return float(s.replace(",", "."))
            except Exception:
                return 0.0
    # fallback
    return 0.0


# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π (–∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç)", type=["json"]) 

if not uploaded_file:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É ‚Äî –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    st.stop()

try:
    raw = json.load(uploaded_file)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
    st.stop()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ DataFrame
if isinstance(raw, dict):
    df = pd.json_normalize([raw])
elif isinstance(raw, list):
    df = pd.json_normalize(raw)
else:
    st.error("–û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç JSON –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ JSON")
    st.stop()

# –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –î–∞—Ç–∞ –≤ datetime
if "–î–∞—Ç–∞" not in df.columns:
    st.error("–í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '–î–∞—Ç–∞'")
    st.stop()

df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")

# –°–∞–π–¥–±–∞—Ä ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
min_date = df["–î–∞—Ç–∞"].min().date()
max_date = df["–î–∞—Ç–∞"].max().date()

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—ë–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
period = st.sidebar.date_input("–ü–µ—Ä–∏–æ–¥ (–≤—ã–±–µ—Ä–∏—Ç–µ 2 –¥–∞—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)", value=(min_date, max_date))

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–Ω—É –¥–∞—Ç—É ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –æ–¥–Ω–æ–π –¥–∞—Ç—ã
if isinstance(period, (list, tuple)) and len(period) == 2:
    start_date, end_date = period[0], period[1]
else:
    start_date = end_date = period

# –°–º–µ–Ω–∞ / –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¢–æ–ø–ª–∏–≤–æ
shift_options = df["–°–º–µ–Ω–∞"].dropna().unique().tolist() if "–°–º–µ–Ω–∞" in df.columns else []
equip_options = df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].dropna().unique().tolist() if "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" in df.columns else []
fuel_options = df["–¢–æ–ø–ª–∏–≤–æ"].dropna().unique().tolist() if "–¢–æ–ø–ª–∏–≤–æ" in df.columns else []

selected_shifts = st.sidebar.multiselect("–°–º–µ–Ω–∞", shift_options, default=shift_options)
selected_equips = st.sidebar.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", equip_options, default=equip_options)
selected_fuels = st.sidebar.multiselect("–¢–æ–ø–ª–∏–≤–æ", fuel_options, default=fuel_options)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered = df.copy()
filtered = filtered[(filtered["–î–∞—Ç–∞"].dt.date >= start_date) & (filtered["–î–∞—Ç–∞"].dt.date <= end_date)]
if selected_shifts:
    filtered = filtered[filtered["–°–º–µ–Ω–∞"].isin(selected_shifts)]
if selected_equips:
    filtered = filtered[filtered["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].isin(selected_equips)]
if selected_fuels:
    filtered = filtered[filtered["–¢–æ–ø–ª–∏–≤–æ"].isin(selected_fuels)]

st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
st.write(f"–ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date} ({(end_date - start_date).days + 1} –¥–Ω.)")
st.dataframe(filtered)

if filtered.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    st.stop()

# ---------------------------
# –†–∞—Å—á—ë—Ç—ã
# ---------------------------
# –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ñ–æ–Ω–¥ T_k = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ * 24
days_count = (end_date - start_date).days + 1
T_k = days_count * 24.0

# 1) K_kf –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (T_f —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–º–µ–Ω–∞–º –∏ –¥–∞—Ç–∞–º –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
k_kf_rows = []
for equip, grp in filtered.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"):
    T_f = 0.0
    # –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–æ–∫–∏ —Å—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≥–¥–µ –≤–∫–ª—é—á–µ–Ω –¥–≤–∏–≥–∞—Ç–µ–ª—å
    for _, row in grp.iterrows():
        raw_durs = ensure_list(row.get("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", []))
        raw_incs = ensure_list(row.get("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å", []))

        hours = [duration_hours_from_item(x) for x in raw_durs]
        # –µ—Å–ª–∏ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
        n = min(len(hours), len(raw_incs)) if raw_incs else len(hours)
        if n == 0 and hours:
            # –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ -> —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ
            pass
        else:
            for i in range(n):
                if to_bool(raw_incs[i]):
                    T_f += hours[i]

    k = T_f / T_k if T_k > 0 else np.nan
    k_kf_rows.append({
        "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
        "–¢–∫ (—á)": round(T_k, 2),
        "–¢—Ñ (—á)": round(T_f, 2),
        "–ö–∫—Ñ": round(k, 3)
    })

k_kf_df = pd.DataFrame(k_kf_rows).sort_values("–ö–∫—Ñ", ascending=False)

# 2) K_is_vr ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –°–º–µ–Ω–∞)
k_is_rows = []
for (equip, shift), grp in filtered.groupby(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞"]):
    T_sm = 0.0
    T_sm_f = 0.0
    for _, row in grp.iterrows():
        raw_durs = ensure_list(row.get("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", []))
        raw_incs = ensure_list(row.get("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–í–∫–ª—é—á–µ–Ω–î–≤–∏–≥–∞—Ç–µ–ª—å", []))

        hours = [duration_hours_from_item(x) for x in raw_durs]
        n = min(len(hours), len(raw_incs)) if raw_incs else len(hours)
        # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        T_sm += sum(hours)
        # –°—É–º–º–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (engine on)
        if n > 0:
            for i in range(n):
                if to_bool(raw_incs[i]):
                    T_sm_f += hours[i]
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–≤–∏–≥–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω -> –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
            pass

    kis = (T_sm_f / T_sm) if T_sm > 0 else np.nan
    k_is_rows.append({
        "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": equip,
        "–°–º–µ–Ω–∞": shift,
        "–¢—Å–º (—á)": round(T_sm, 2),
        "–¢—Å–º—Ñ (—á)": round(T_sm_f, 2),
        "–ö–∏—Å–≤—Ä": round(kis, 3)
    })

k_is_df = pd.DataFrame(k_is_rows).sort_values(["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞"])

# ---------------------------
# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# ---------------------------
st.subheader("üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ö–∫—Ñ) ‚Äî –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
st.dataframe(k_kf_df)

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å
csv_k_kf = k_kf_df.to_csv(index=False).encode("utf-8")
st.download_button("–°–∫–∞—á–∞—Ç—å –ö–∫—Ñ (CSV)", csv_k_kf, file_name="k_kf_by_equipment.csv")

st.subheader("üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏—Å–≤—Ä) ‚Äî –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ —Å–º–µ–Ω–∞–º")
st.dataframe(k_is_df)
csv_k_is = k_is_df.to_csv(index=False).encode("utf-8")
st.download_button("–°–∫–∞—á–∞—Ç—å –ö–∏—Å–≤—Ä (CSV)", csv_k_is, file_name="k_is_by_equipment_shift.csv")

# ---------------------------
# –ì—Ä–∞—Ñ–∏–∫–∏
# ---------------------------
st.markdown("---")
col1, col2 = st.columns(2)

with col1:
    st.markdown("#### –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –ö–∫—Ñ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
    if not k_kf_df.empty:
        chart1 = alt.Chart(k_kf_df).mark_bar().encode(
            x=alt.X("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:N", sort="-y", title=None),
            y=alt.Y("–ö–∫—Ñ:Q", title="–ö–∫—Ñ"),
            tooltip=["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–¢—Ñ (—á)", "–¢–∫ (—á)", "–ö–∫—Ñ"]
        ).properties(height=400)
        st.altair_chart(chart1, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ö–∫—Ñ")

with col2:
    st.markdown("#### –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –ö–∏—Å–≤—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (—Ä–∞–∑–±–∏—Ç–∏–µ –ø–æ —Å–º–µ–Ω–∞–º)")
    if not k_is_df.empty:
        # –£–±–µ—Ä—ë–º NaN –ö–∏—Å–≤—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏–ª–∏ –ø–æ–∫–∞–∂–µ–º 0)
        vis_df = k_is_df.copy()
        vis_df["–ö–∏—Å–≤—Ä"] = vis_df["–ö–∏—Å–≤—Ä"].fillna(0)

        chart2 = alt.Chart(vis_df).mark_bar().encode(
            x=alt.X("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:N", title=None),
            y=alt.Y("–ö–∏—Å–≤—Ä:Q", title="–ö–∏—Å–≤—Ä"),
            color=alt.Color("–°–º–µ–Ω–∞:N", title="–°–º–µ–Ω–∞"),
            tooltip=["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–°–º–µ–Ω–∞", "–¢—Å–º (—á)", "–¢—Å–º—Ñ (—á)", "–ö–∏—Å–≤—Ä"],
            xOffset="–°–º–µ–Ω–∞:N"
        ).properties(height=400)

        st.altair_chart(chart2, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ö–∏—Å–≤—Ä")

st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ * 24—á.\n–ö–∏—Å–≤—Ä —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –°–º–µ–Ω–∞) ‚Äî —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–∞—Ä—ã.")
